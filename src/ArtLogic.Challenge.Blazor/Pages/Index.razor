@page "/"
@using System.Text.Json

<PageTitle>Index</PageTitle>

<div hidden="@HasError" class="text-danger">@_errorMessage</div>

<MatTextField @bind-Value="@_decoded" Label="Unencoded Text"></MatTextField> 
<br/>
<MatButton OnClick="@Encode" Raised="true">Encode</MatButton> 
<br/> <br/>

<MatTextField @bind-Value="_encoded" Label="Encoded Bits"></MatTextField> <br/>
<MatButton OnClick="@Decode" Raised="true">Decode to Text</MatButton>

@code
{
    private string _decoded = string.Empty;
    private string _encoded = string.Empty;
    private string _errorMessage = string.Empty;
    private bool HasError => string.IsNullOrEmpty(_errorMessage);

    private void Encode()
    {
        _errorMessage = string.Empty;
        if (string.IsNullOrEmpty(_decoded))
        {
            _errorMessage = "Cannot encode an empty string";
        }
        else
        {
            _encoded = JsonSerializer.Serialize(
                AWeirdText.WeirdEncode(_decoded));
        }
        
        StateHasChanged();
    }

    private void Decode()
    {
        try
        {
            _errorMessage = string.Empty;

            _decoded = _encoded.StartsWith('[') ? 
                AWeirdText.WeirdDecode(JsonSerializer.Deserialize<List<int>>(_encoded)!) 
                : AWeirdText.WeirdDecode(new[] { JsonSerializer.Deserialize<int>(_encoded) });
        }
        catch (JsonException)
        {
            _errorMessage = "Decoded was not in int array format -> [ x, y ]";
        }
        
        StateHasChanged();
    }
}